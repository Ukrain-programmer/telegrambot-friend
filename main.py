import time
from datetime import datetime

import telebot
from telebot import types

from DbConnect import *
from configpars import config
import logging

TWO_BEER = "üçª"
BEER = "üç∫"
FRIEND = "üë¨"
HELP = "üì£"
BLOCK = "üîí"
UNBLOCK = "üîì"
MAIL = "üì®"
DOWN = "‚¨á"
AIRPLANE_ATTACK = "‚ùóÔ∏è‚úàÔ∏è"
ARTILLERY = "‚ùóÔ∏èüí£"

bot = telebot.TeleBot('')  # config("config.ini", "token").get("token")

db = BdService()

logging.basicConfig(level=logging.INFO, format='%(asctime)s %(name)s %(levelname)s:%(message)s', )
log = logging.getLogger(__name__)


@bot.message_handler(commands=["message"])
def handle_admin_general_mailing(message):
    log.info("Start general mailing user - {}".format(message.chat.id))
    if not message.chat.id in db.get_admin_list():
        log.info("User {} have not permission".format(message.chat.id))
        bot.send_message(message.chat.id, "–¢–∞–∫–∏ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ  Ã∂—ÇÃ∂–≤Ã∂–æÃ∂–πÃ∂ –±–∞—Ç—è")
        return

    bot.send_message(message.chat.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º" + DOWN)
    bot.register_next_step_handler(message, general_mailing)
    log.info("General mailing by user - {} end".format(message.chat.id))


@bot.message_handler(commands=["offer" + MAIL])
def send_offer(message):
    log.info("Start user - {} offer ".format(message.chat.id))
    bot.send_message(message.chat.id, "–Ø –≤—ã—Å–ª—É—à–∞—é —Ç–µ–±—è –∂–∏–≤–æ—Ç–Ω–æ–µ, –Ω–∞–ø–∏—à–∏ —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å" + DOWN)
    bot.register_next_step_handler(message, inform_admin_and_save_offer)
    log.info("End user - {} offer ".format(message.chat.id))


@bot.message_handler(commands=["help" + HELP])
def help(message):
    log.info("User {} call help".format(message.chat.id))
    bot.send_message(message.chat.id, """go_all_friend_toBeerüçª - –∫–æ–º–∞–Ω–¥–∞, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞—Å—Å—ã–ª–∞–µ—Ç –≤—Å–µ–º –≤–∞—à–∏–º –¥—Ä—É–∑—å—è–º(üë¨) –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Ä–∞—Å–ø–∏—Ç–∏–µ —Å–ø–µ—Ä—Ç–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤, –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å –¥—Ä—É–≥ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –æ—Ç–∫–∞–∑–∞—Ç—Å—è, –±–æ—Ç –ø—Ä–∏—à–ª–µ—Ç –≤–∞–º –æ—Ç–≤–µ—Ç\nall_friendsüë¨ - –∫–æ–º–∞–Ω–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞. 
    üë¨ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ç–∞–∫–æ–π –æ—Ç–º–µ—Ç–∫–æ–π —è–≤–ª—è—é—Ç—å—Å—è –≤–∞—à–∏–º –¥—Ä—É–≥–æ–º.
    üîí - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ç–∞–∫–∏–º –∑–Ω–∞–∫–æ–º  Ã∂–øÃ∂–∏Ã∂–¥Ã∂–æÃ∂—ÄÃ∂—ãÃ∂ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Ö –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –≤ –¥—Ä—É–∑—å—è 
blocküîí - –∫–æ–º–∞–Ω–¥–∞ –∫–æ—Ç–æ—Ä–∞—è –±–ª–æ–∫–∏—Ä—É–µ—Ç –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –í–∞—Å, –µ—Å–ª–∏ –≤—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã —Ç–æ –≤–∞—Å –Ω–µ –º–æ–≥—É—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤ –¥—Ä—É–∑—å—è
offerüì® - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –±–∞–≥ –æ–¥–º—ç–Ω—É
artillery_attack‚ùóÔ∏èüí£ - –∫–æ–º–∞–Ω–¥–∞ –∫–æ—Ç–æ—Ä–∞—è –æ–ø–æ–≤–µ—Å—Ç–∏—Ç –¥—Ä—É–∑–µ–π –æ–± —É–¥–∞—Ä–µ –∞—Ä—Ç–µ–ª–µ—Ä–∏–∏ (—Ç–æ–ª—å–∫–æ —Ç–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–µ —É –≤–∞—Å –≤ –¥—Ä—É–∑—å—è—Öüë¨)
airplane_attack‚ùóÔ∏è‚úà - –∫–æ–º–∞–Ω–¥–∞ –∫–æ—Ç–æ—Ä–∞—è –æ–ø–æ–≤–µ—Å—Ç–∏—Ç –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∞–≤–∏–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ —Ç–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–µ —É –≤–∞—Å –≤ –¥—Ä—É–∑—å—è—Öüë¨)""")


@bot.message_handler(commands=["block" + BLOCK, "block" + UNBLOCK])
def block_user(message):
    if db.is_blocked_user(message.chat.id):
        log.info("User {} is unblocked ".format(message.chat.id))
        db.update_user_block(False, message.chat.id)
        bot.send_message(message.chat.id, UNBLOCK)
    else:
        db.update_user_block(True, message.chat.id)
        bot.send_message(message.chat.id, BLOCK)
        log.info("User {} is blocked ".format(message.chat.id))


@bot.message_handler(commands=["all_people" + FRIEND])
def all_user(message):
    log.info("User {} call all people".format(message.chat.id))
    markups = types.InlineKeyboardMarkup()
    userFriends = db.get_user_frienids(message.chat.id)
    for user in db.get_all_users():
        if user.id == message.chat.id:
            continue
        text = str(user.firstname) + " " + (str(user.lastname) if user.lastname is not None else "")
        if user in userFriends:
            text = text + FRIEND
        elif user.isBlock:
            text = text + BLOCK

        markups.add(types.InlineKeyboardButton(text, callback_data="friendship:" + str(user.id)))
    bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥—Ä—É–∑—å—è", reply_markup=markups)


@bot.callback_query_handler(func=lambda call: True)
def controller(call):
    if call.data.split(":")[0] == "friendship":
        friendship(call.message, call.data.split(":")[-1])
    if call.data.split(":")[0] == "+":
        bot.delete_message(call.message.chat.id, call.message.id)
        bot.send_message(call.message.chat.id, "–•–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä, –°—ç—Ä")
        bot.send_message(call.data.split(":")[-1],
                         call.from_user.first_name + ": –ö–û–ù–ï–ß–ù–û, —è —á—Ç–æ –≤ –∫—Ä–∞—Å—Ç–Ω–æ–π —à–∞–ø–∫–µ" + TWO_BEER)
    if call.data.split(":")[0] == "-":
        bot.delete_message(call.message.chat.id, call.message.id)
        bot.send_message(call.message.chat.id, "–ú–¥–∞, –Ω–µ –æ–∂–∏–¥–∞–ª –æ—Ç —Ç–µ–±—è —Ç–∞–∫–æ–≥–æ")
        bot.send_message(call.data.split(":")[-1], call.from_user.first_name + ": –Ø —Å–µ–≥–æ–¥–Ω—è —Ç—Ä–µ–∑–≤–∏–Ω–∏–∫")


@bot.message_handler(commands=["airplane_attack" + AIRPLANE_ATTACK])
def send_all_air_attack(message):
    send_message_to_user_friend(message.chat.id, message.chat.first_name + ": –í–ù–ò–ú–ê–ù–ò–ï –ò–°–¢–†–ï–ë–ò–¢–ï–õ–ò " + AIRPLANE_ATTACK)


@bot.message_handler(commands=["artillery_attack" + ARTILLERY])
def send_all_art_attack(message):
    send_message_to_user_friend(message.chat.id, message.chat.first_name + ": –í–ù–ò–ú–ê–ù–ò–ï –ë–û–ú–ë–Ø–¢ " + ARTILLERY)


@bot.message_handler(commands=["go_all_friend_toBeer" + BEER])
def send_all_beer(message):
    log.info("User {} call your friends to beer".format(message.chat.id))
    bot.send_message(message.chat.id, text="–ü–∏–∏–∏–≤–æ–æ–æüö®")
    keyboard = types.InlineKeyboardMarkup() \
        .add(types.InlineKeyboardButton(text="+", callback_data="+:" + str(message.chat.id))) \
        .add(types.InlineKeyboardButton(text="-", callback_data="-:" + str(message.chat.id)))

    for user in db.get_user_frienids(message.chat.id):
        bot.send_message(user.id, "{}: –ì–æ –ø–∏—Ç—å –ø–∏–≤–æ".format(message.from_user.first_name), reply_markup=keyboard)


@bot.message_handler(commands=["start"])
def start(message):
    down_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True) \
        .add(types.InlineKeyboardButton("/airplane_attack" + AIRPLANE_ATTACK)) \
        .add(types.InlineKeyboardButton("/artillery_attack" + ARTILLERY)) \
        .row(types.InlineKeyboardButton("/offer" + MAIL), types.InlineKeyboardButton("/all_people" + FRIEND)) \
        .row(types.InlineKeyboardButton("/block" + BLOCK), types.InlineKeyboardButton("/help" + HELP))

    flag = db.has_user_in_db(message.chat.id)
    if flag:
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç –º—ã —Å —Ç–æ–±–æ–π —É–∂–µ –≤–∏–¥–µ–ª–∏—Å—å, —Å—É–∫–∞")
        log.info("User peek start {}".format(message.chat.id))
    else:
        log.info("New user {}".format(message.chat.id))
        db.add_user(
            [message.chat.id, message.chat.first_name, message.chat.last_name,
             message.chat.username, None, False]
        )
        bot.send_message(message.chat.id, "–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è {}".format(message.from_user.first_name))

    bot.send_message(message.chat.id, text="–ú–æ–∂–µ—à—å –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏" + HELP, reply_markup=down_keyboard)
    # keyboard = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton(text="–í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ—Ö –ª—é–¥–µ–π", callback_data=1))
    # bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏ —Ç–∞–±–ª–µ—Ç–∫—É. '–í —Ç–≤–æ–µ–º —Å–ª—É—á–∞–µ –±—É—Ç—ã–ª–∫—É'", reply_markup=keyboard)


def send_message_to_user_friend(userId, message: str):
    for user in db.get_user_frienids(userId):
        bot.send_message(user.id, message)


def refresh_user_list(message):
    bot.delete_message(message.chat.id, message.id)
    all_user(message)


def get_user_keyboard():
    return types.ReplyKeyboardMarkup(resize_keyboard=True) \
        .add(types.InlineKeyboardButton("/airplane_attack" + AIRPLANE_ATTACK)) \
        .add(types.InlineKeyboardButton("/artillery_attack" + ARTILLERY)) \
        .row(types.InlineKeyboardButton("/offer" + MAIL), types.InlineKeyboardButton("/all_people" + FRIEND)) \
        .row(types.InlineKeyboardButton("/block" + BLOCK), types.InlineKeyboardButton("/help" + HELP))

def inform_admin_and_save_offer(message):
    db.add_offer(message.chat.id, message.text, datetime.fromtimestamp(message.date))
    log.info("Offer was added from user {}".format(message.chat.id))
    for adminId in db.get_admin_list():
        bot.send_message(adminId,
                         "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç: {}({}) - {}".format(message.chat.first_name, message.chat.id, message.text))


def general_mailing(message):
    for user in db.get_all_users():
        bot.send_message(user.id, message.text, reply_markup=get_user_keyboard())


def friendship(message, friendId: int):
    has_friend = db.has_friend(message.chat.id, friendId)
    if db.is_blocked_user(friendId) and not has_friend:
        log.info("User {} try to peek {} but he is a block".format(message.chat.id, friendId))
        bot.send_message(message.chat.id, text="–ù–∞—Ö—É–π –∏–¥–∏, –¥–∞ ")
        return

    if has_friend:
        db.delete_friend([message.chat.id, friendId])
        log.info("User {} delete from friend {} ".format(message.chat.id, friendId))
        refresh_user_list(message)
    else:
        db.add_friend([message.chat.id, friendId])
        log.info("User {} add to friend {} ".format(message.chat.id, friendId))
        refresh_user_list(message)


def main():
    while True:
        try:
            log.info("Bot running..")
            bot.polling(none_stop=True, interval=2)
            break
        except Exception as e:
            log.error(e)
            bot.stop_polling()

            time.sleep(15)

            log.info("Running again!")


if __name__ == '__main__':
    main()
